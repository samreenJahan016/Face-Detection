import cv2
import numpy as np

# Load the input images
image1 = cv2.imread(r"C:\Python\Python311\PIC1.png")  # Source image
image2 = cv2.imread(r"C:\Python\Python311\PIC2.png")  # Target image

# Load the pre-trained face cascade classifier
face_cascade = cv2.CascadeClassifier(r"C:\Python\Python311\haarcascade_frontalface_default.xml")

# Detect faces in both images
gray1 = cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY)
gray2 = cv2.cvtColor(image2, cv2.COLOR_BGR2GRAY)

faces1 = face_cascade.detectMultiScale(gray1, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
faces2 = face_cascade.detectMultiScale(gray2, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

if len(faces1) > 0 and len(faces2) > 0:
    # Assume only one face is detected in each image
    (x1, y1, w1, h1) = faces1[0]
    (x2, y2, w2, h2) = faces2[0]

    # Extract the face region from each image
    face_region1 = image1[y1:y1 + h1, x1:x1 + w1]
    face_region2 = image2[y2:y2 + h2, x2:x2 + w2]

    # Resize the face region to an oval shape
    oval_width = int(w1 * 1.5)
    oval_height = int(h1 * 1.5)
    resized_face_region2 = cv2.resize(face_region2, (oval_width, oval_height))

    # Create a mask for the oval shape
    mask = np.zeros_like(resized_face_region2)
    center = (oval_width // 2, oval_height // 2)
    axes = (oval_width // 2, oval_height // 2)
    color = (255, 255, 255)
    cv2.ellipse(mask, center, axes, 0, 0, 360, color, -1)

    # Apply the mask to the resized face region
    masked_face_region2 = cv2.bitwise_and(resized_face_region2, mask)

    # Resize the masked face region back to its original size
    swapped_face_region = cv2.resize(masked_face_region2, (w1, h1))

    # Create a mask for the swapped face region
    mask2 = cv2.cvtColor(swapped_face_region, cv2.COLOR_BGR2GRAY)
    mask2 = cv2.threshold(mask2, 1, 255, cv2.THRESH_BINARY)[1]
    mask2 = cv2.merge([mask2, mask2, mask2])

    # Blend the swapped face region with the source image using the mask
    output = np.where(mask2 != 0, swapped_face_region, face_region1)

    # Replace the face region in the source image with the swapped face
    image1[y1:y1 + h1, x1:x1 + w1] = output

    # Display the output image with the swapped face
    cv2.imshow('Face Swapped Image', image1)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
else:
    print('No faces detected in one or both images.')
